type Block {
  id: ID!
  type: BlockType!
  content: String!
}

enum BlockType {
  paragraph
  heading1
  heading2
  heading3
  bulletList
  numberedList
  quote
  code
}

input BlockInput {
  id: ID!
  type: BlockType!
  content: String!
}

type Note {
  id: ID!
  title: String!
  content: String!
  blocks: [Block!]!
  color: String!
  version: Int!
  created: DateTime!
  createdBy: ID!
  lastEdited: DateTime!
  lastEditedBy: ID!
  activeUsers: [User!]!
}

input CreateNoteInput {
  id: String!
  title: String!
  content: String!
  blocks: [BlockInput!]!
  color: String!
  version: Int!
  created: DateTime!
  createdBy: String!
  lastEdited: DateTime!
  lastEditedBy: String!
}

input UpdateNoteInput {
  title: String
  color: String
  blocks: [BlockInput!]
  version: Int!
  lastEdited: DateTime
}

extend type Query {
  notes: [Note!]!
  note(id: ID!): Note
}

extend type Mutation {
  createNote(note: CreateNoteInput!): Note!
  updateNote(id: ID!, changes: UpdateNoteInput!): Note!
  deleteNote(id: ID!): Note!
  addUserToNote(noteId: ID!, userId: ID!): Note!
}

extend type Subscription {
  noteUpdated(id: ID!): Note
}
